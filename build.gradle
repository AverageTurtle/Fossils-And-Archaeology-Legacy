plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = "1.0.0"
group = project.mod_id

base {
	archivesName = project.mod_id
}

repositories {
	maven { url "https://jitpack.io" }
	maven { url "https://api.modrinth.com/maven/" }
	maven { url "https://maven.blamejared.com/" }
	maven { url "https://modmaven.dev/" }
	maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
	maven { url "https://mvn.devos.one/snapshots/" }
	maven { url "https://maven.jamieswhiteshirt.com/libs-release/" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {
	accessWidenerPath = file("src/main/resources/fossilslegacy.accesswidener")
	
	runs {
		datagen {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"
			vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
 
			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
} 

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()

	modImplementation "net.fabricmc:fabric-loader:${project.fabric_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.api_version}"

	modApi include("maven.modrinth:simple-library:${project.simple_library_version}")
	
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:data:${project.porting_lib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_generators:${project.porting_lib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:utility:${project.porting_lib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_materials:${project.porting_lib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:${project.porting_lib_version}"))
		
	api "fuzs.forgeconfigapiport:forgeconfigapiport-common-neoforgeapi:${project.forge_config_api_version}"
	api "fuzs.forgeconfigapiport:forgeconfigapiport-common-forgeapi:${project.forge_config_api_version}"
	modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.forge_config_api_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	
	modLocalRuntime("com.terraformersmc:modmenu:${project.mod_menu_version}")

	modCompileOnlyApi("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
	modCompileOnlyApi("mezz.jei:jei-${project.minecraft_version}-fabric-api:${project.jei_version}")
	modRuntimeOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}")
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}