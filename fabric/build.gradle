plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom' version '1.6-SNAPSHOT'
}

base {
    archivesName = "fossilslegacy-fabric"
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${api_version}"

    modApi include("simplelibrary:simplelibrary-fabric:${simple_library_version}")

    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:data:${porting_lib_version}"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_generators:${porting_lib_version}"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:utility:${porting_lib_version}"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:model_materials:${porting_lib_version}"))
    modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:${porting_lib_version}"))

    api "fuzs.forgeconfigapiport:forgeconfigapiport-common-neoforgeapi:${forge_config_api_version}"
    api "fuzs.forgeconfigapiport:forgeconfigapiport-common-forgeapi:${forge_config_api_version}"
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation "com.terraformersmc:modmenu:${mod_menu_version}"

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    compileOnly project(":common")
}

loom {
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {

        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
        datagen {
            inherit client
            setConfigName("Fabric Data")
            ideConfigGenerated(true)
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("${project(':common').projectDir.path}/src/main/resources")}"

            runDir "build/datagen"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}
